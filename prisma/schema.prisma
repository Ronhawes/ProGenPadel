generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id           BigInt     @id @default(autoincrement())
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  name         String?
  club_manager String?
  email        String?    @unique @db.VarChar
  password     String?    @db.VarChar
  Coaches      Coaches[]
  Courts       Courts[]
  Event        Event[]
  Players      Players[]
  Sessions     Sessions[]
}

model Coaches {
  id         BigInt     @id @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  name       String?
  charges    BigInt?
  club_id    BigInt?
  picture    String?
  email      String?    @unique
  password   String?    @db.VarChar
  Club       Club?      @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Sessions   Sessions[]
}

model Courts {
  id         BigInt     @id @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  name       String?
  charges    BigInt?
  club_id    BigInt?
  Club       Club?      @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Sessions   Sessions[]
}

model Event {
  id          BigInt   @id(map: "Events_pkey") @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  name        String?
  charges     BigInt?
  club_id     BigInt?
  description String?
  picture     String?
  Club        Club?    @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Events_club_id_fkey")
}

model Events {
  id         BigInt   @id(map: "Events_pkey1") @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  event_id   BigInt?
}

model Players {
  id         BigInt     @id @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  name       String?
  club_id    BigInt?
  picture    String?
  email      String?    @unique
  password   String?    @db.VarChar
  Club       Club?      @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Sessions   Sessions[]
}

model Sessions {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  player_id  BigInt?
  charges    BigInt?
  coach_id   BigInt?
  court_id   BigInt?
  club_id    BigInt?
  Club       Club?    @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Coaches    Coaches? @relation(fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Courts     Courts?  @relation(fields: [court_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Players    Players? @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model passwordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
  expires   DateTime
  createdAt DateTime @default(now())
}
